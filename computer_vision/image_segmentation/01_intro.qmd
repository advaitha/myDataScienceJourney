# Image Segmentation

* Different types of segmentation
    * Semantic segmentation (every pixel is classified)
    * Instance segmentation (object level classification)
    * Panoptic segmentation (combination of pixel and instance)

![Different segmentation](/Images/types_of_segmentation.png)



* After convolutions and pooling we will have a lot of feature maps in reduced dimensions. With the help of compressed latent space representation we can do lot of things like classification, upsampling etc
![Latent space representation](/Images/latent_space.png)
* Auto-encoders 


### Upsampling
* Upsampling from Latent space representation to the original size of the image
* Upsampling happens in decoder
* Upsampling is used for image generation, enhancement, mapping and more
    * Nearest Neighor
    * Bed of Nails
    * Bilinear upsampling
    * Transposed convolutions
    * Max unpooling

#### Nearest Neighbor
![Nearest Neighbors Upsampling](/Images/nn_upsampling.png)


#### Bed of nails
![Bed of nails](/Images/upsample_bn.png)


#### Bilinear interpolation
* Most popular
* ![Bilinear](/Images/bilinear.png)


#### Max unpooling
* ![Max Unpooling](/Images/max_unpooling.png)


#### Transposed convolution
* ![Transposed convolutions](/Images/transposed_convol.png)



### Interpolate in pytorch

```python
nearest_neighbour_out = F.interpolate(input, scale_factor=2, mode='nearest')

bilinear_interp_out = F.interpolate(input, scale_factor=2, mode='bilinear', align_corners=False)
```


## Skip Connections
* When we are decompressing the image, it is difficult for the network to come up with original image size. Lot of information is lost in compression. To help in the process, skip connections exist between encoder and decoder.

![skip connections](/Images/skip_connections.png)

* There are two types of skip connections: Additive and concatenating

* ResNet is addition
* DenseNet is concatenation

![Addition Vs Concat](/Images/skip_two.png)

**In segmentation, skip connections are used to pass features from the encoder path to the decoder path in order to recover spatial information lost during downsampling**

![skip connection - Gradient Descent](/Images/skip_connections.png.png)


![Difference between pooling and convolution](/Images/pooling_vs_conv.png)
* 1x1 convolution is to reduce the number of filters (not sure how it happens)

![1x1 convolutions](/Images/1x1_conv.png)


### Metrics and loss functions
* The metric used is Intersection over union (i.e Jaccard similarity)

* The loss function is Focal loss (This is weighted cross entropy loss in addition to 'gamma' which will take care of class imbalance)

* Dice loss is also used

![Different types of loss functions](/Images/nn_losses.png)

